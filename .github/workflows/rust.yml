name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git line endings
        run: git config --global core.autocrlf input
      - uses: actions/checkout@v4

      # Linux setup
      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y pkg-config libgtk-4-dev libcairo2-dev libpango1.0-dev libglib2.0-dev

      # macOS setup
      - name: Install system dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config glib cairo pango fontconfig freetype harfbuzz gtk4


      # Windows setup (MSVC toolchain, vcpkg, GTK4/GLib)
      - name: Install vcpkg and GTK4/GLib (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install gtk4 glib
          echo "PKG_CONFIG_PATH=$PWD/vcpkg/installed/x64-windows/lib/pkgconfig" >> $GITHUB_ENV
          echo "$PWD/vcpkg/installed/x64-windows/bin" >> $GITHUB_PATH
          echo "$PWD/vcpkg/installed/x64-windows/debug/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Build (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --verbose

      - name: Test (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose

      # Final build & test on Linux/macOS
      - name: Build & test (others)
        if: runner.os != 'Windows'
        run: |
          cargo build --workspace --verbose
          cargo test --workspace --verbose
