name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git line endings
        run: git config --global core.autocrlf input
      - uses: actions/checkout@v4

      # Linux setup
      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y pkg-config libgtk-4-dev libcairo2-dev libpango1.0-dev libglib2.0-dev

      # macOS setup
      - name: Install system dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config glib cairo pango fontconfig freetype harfbuzz gtk4

      # Windows setup (MSVC toolchain, pkg-config-lite, GTK4 env)
      - name: Install pkg-config-lite (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -UserAgent "Wget" -Uri https://downloads.sourceforge.net/project/pkgconfiglite/0.28-1/pkg-config-lite-0.28-1_bin-win32.zip -OutFile pkg_config_lite.zip -MaximumRetryCount 5
          Expand-Archive pkg_config_lite.zip -DestinationPath C:\
          echo "C:\pkg-config-lite-0.28-1\bin" >> $GITHUB_PATH
      - name: Verify pkg-config.exe exists (Windows)
        if: runner.os == 'Windows'
        run: |
          if (!(Test-Path "C:\pkg-config-lite-0.28-1\bin\pkg-config.exe")) {
            Write-Error "pkg-config.exe not found after extraction!"
            exit 1
          } else {
            Write-Host "pkg-config.exe found."
          }
        env:
          PATH: C:\pkg-config-lite-0.28-1\bin;C:\gnome\bin;${{ env.PATH }}
      - name: Print PATH and pkg-config version (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "PATH: $env:PATH"
          & "C:\pkg-config-lite-0.28-1\bin\pkg-config.exe" --version
        env:
          PATH: C:\pkg-config-lite-0.28-1\bin;C:\gnome\bin;${{ env.PATH }}

      - name: Add GTK4 binaries to PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "C:\gnome\bin" >> $GITHUB_PATH
        env:
          PATH: C:\pkg-config-lite-0.28-1\bin;C:\gnome\bin;${{ env.PATH }}

      - name: Set PKG_CONFIG_PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "PKG_CONFIG_PATH=C:\gnome\lib\pkgconfig" >> $GITHUB_ENV
        env:
          PATH: C:\pkg-config-lite-0.28-1\bin;C:\gnome\bin;${{ env.PATH }}

      - name: Cache GTK4 build (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: C:/gnome
          key: ${{ runner.os }}-gtk4-19
          restore-keys: |
            ${{ runner.os }}-gtk4-19

      - name: Install Rust toolchain (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Build (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --verbose

      - name: Test (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose

      # Final build & test on Linux/macOS
      - name: Build & test (others)
        if: runner.os != 'Windows'
        run: |
          cargo build --workspace --verbose
          cargo test --workspace --verbose
